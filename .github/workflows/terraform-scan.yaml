name: terraform-lint-scan

on:
  workflow_call:
    inputs:
      soft-fail:
        required: false 
        description: 'Tfsec to hard stop the pipeline or not when vulnerabilities are found'
        default: true
        type: boolean
      tf-dirs:
        required: false
        description: 'Regula variable for terraform directories, either space or new line separated'
        default: '.'
        type: string
      github-token:
        required: true
        description: GitHub token
        type: string

run-name: ${{ github.actor }} is scanning Terraform in ${{ github.repository }}
jobs:
  tflint:
    runs-on: ubuntu-latest
    steps:
      - name: Clone repo
        uses: actions/checkout@v3

      - name: Terraform init
        run: terraform init

      - name: Set Diff Readme recursive
        id: find_readme
        run: |
          # Stash a list of all readmes found and their sha
          readme_list=$(find . -print|grep -v '.git'|grep -v .terraform|grep -v .config|grep README.md)
          csv_found=''
          for readme in $readme_list; do
            # Finds only the Readme with .tf in the dir.
            directory_check=${readme:0:-9}
            has_tf=$(ls $directory_check | grep .tf | wc -l)
            if [ $has_tf -ge 0 ]; then
              echo "Readme found: $readme"
              csv_found+="$directory_check,"
            fi
          done;
          # removes final comma
          for j in ${csv_found[@]}; do echo "folder, $j"; done;
          echo "csv_readme=${csv_found%,}" >> $GITHUB_OUTPUT

      - name: Update Terraform Docs
        uses: terraform-docs/gh-actions@v1.0.0
        with:
          working-dir: ${{ steps.find_readme.outputs.csv_readme }}
          output-method: inject
          git-push: false
          fails-on-diff: true

      - name: terraform validate
        run: terraform validate

      - name: terraform fmt
        run: terraform fmt -recursive

        # Use the GraphQL API to commit changes, so we get automatic commit signing
        # The REST contents API can't be used as easily because it only supports making single file commits
      - name: Commit updated files
        shell: bash
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail

          additions=()
          removed=()
          while IFS= read -r -d $'\0' status_line; do
              filename="${status_line:3}"
              git_status="${status_line:0:2}"

              if [ "$git_status" = "D " ]; then
                  removed+=("$filename")
              else
                  additions+=("$filename")
              fi
          done < <(git status --porcelain=v1 -z)

          if [ "${#additions[@]}" -eq 0 ] ; then
            echo "No files updated, skipping commit"
            exit 0
          fi

          commitMessage="chore: terraform README update and fmt"

          # for now, we ignore $removed files, but they could be handled similarly (it's just harder to send two lists of positional input files into jq)
          # jq's iteration over inputs will skip over files with 0 lines (empty files)

          jq \
            --null-input \
            --raw-input \
            --arg repositoryNameWithOwner "$GITHUB_REPOSITORY" \
            --arg branchName "$GITHUB_REF_NAME" \
            --arg expectedHeadOid "$GITHUB_SHA" \
            --arg commitMessage "$commitMessage" \
            '
          {
            "query": "mutation ($input: CreateCommitOnBranchInput!) { createCommitOnBranch(input: $input) { commit { url } } }",
            "variables": {
              "input": {
                "branch": {
                  "repositoryNameWithOwner": $repositoryNameWithOwner,
                  "branchName": $branchName
                },
                "message": {
                  "headline": $commitMessage
                },
                "fileChanges": {
                  "additions": [reduce inputs as $line ({}; .[input_filename] += [$line]) | map_values(join("\n")) | to_entries[] | {path: .key, contents: .value | @base64}]
                },
                "expectedHeadOid": $expectedHeadOid
              }
            }
          }' "${additions[@]}" | curl https://api.github.com/graphql \
            --silent \
            --fail-with-body \
            --oauth2-bearer "$(gh auth token)" \
            --data @-

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v3
        with:
          tflint_version: v0.46.1

      - name: Show version
        run: tflint --version

      - name: Init TFLint
        run: tflint --init
        env:
          # https://github.com/terraform-linters/tflint/blob/master/docs/user-guide/plugins.md#avoiding-rate-limiting
          GITHUB_TOKEN: ${{ github.token }}

      - name: Run TFLint
        run: tflint -f compact --recursive

  tfsec-scan:
    needs: [tflint]
    runs-on: ubuntu-latest
    steps:
      - name: Clone repo
        uses: actions/checkout@v3

      - name: tfsec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          github_token: ${{ github.token }}
          soft_fail: ${{ inputs.soft-fail }}

  regula:
    needs: [tflint]
    runs-on: ubuntu-latest
    steps:
      - name: Clone repo
        uses: actions/checkout@v3

      - name: List Directories
        run: ls -lsa

      - name: Scan with Regula
        uses: fugue/regula-action@v3.2.1
        with:
          input_path: ${{ inputs.tf-dirs }}
          input_type: tf
